In the context of this Lab, we focus on implementing a subset of HTTP
network protocol specifications on top of the transport layer, TCP/UDP of OSI, TCP/IP
models respectively.

Similarly to the cURL project, the requested implementation of this Lab needs to have a 
network protocol software library and the command line application. Therefore, the main 
tasks of this Lab are the following:

1. Implementing your own HTTP client library using TCP Socket directly. Only a subset of 
HTTP protocol features is requested. Specifically, you need to implement GET and HTTP POST requests.

2. Leverage the developed HTTP client library to develop a command-line application similar 
to the cURL one. However, your version needs only to have basic functionalities with limited 
options such as the POST, GET, and verbose option.

We are to use HTTP version 1.0 due to its simplicity and ease to implement.

----------------------------Task 1.)--------------------------------
HTTP Client Library Implementation notes
After getting a deeper understanding of the flow of HTTP GET and POST operations, you are 
requested to implement your HTTP client using TCP Sockets. The programming library implements
only a small subset of HTTP specifications. In other words, we expect that your HTTP library 
supports the following features:

1. GET operation
2. POST operation
3. Query parameters
4. Request headers
5. Body of the request  

----------------------Additional information regarding the library----
You can refer to HTTP protocol reference (https://www.w3.org/Protocols/HTTP/1.0/spec.html)for more information about these features. You can start your
implementation by leveraging the provided samples for HTTP-ECHO and HTTP-TIME protocols at the example 
directory
HTTP-ECHO: https://datatracker.ietf.org/doc/html/rfc862
echoclient and server.py

Returns what the client sends to the server

A very useful debugging and measurement tool is an echo service.  An
echo service simply sends back to the originating source any data it
receives.

TCP Based Echo Service

   One echo service is defined as a connection based application on TCP.
   A server listens for TCP connections on TCP port 7.  Once a
   connection is established any data received is sent back.  This
   continues until the calling user terminates the connection.

UDP Based Echo Service

   Another echo service is defined as a datagram based application on
   UDP.  A server listens for UDP datagrams on UDP port 7.  When a
   datagram is received, the data from it is sent back in an answering
   datagram.

HTTP-TIME: https://datatracker.ietf.org/doc/html/rfc868

This protocol provides a site-independent, machine readable date and
time.

----------------------------Task 2.)--------------------------------